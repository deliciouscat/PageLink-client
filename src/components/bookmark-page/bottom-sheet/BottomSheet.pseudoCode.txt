# 개요
Documment(웹페이지)의 댓글을 표시하는 BottomSheet 컴포넌트.

# Pseudo code
import phosphor-icons
import CommentBox.vue   // 모듈 따로 작성
import color_template.css

Config(
    call: [
        user_nickname, epithet, doc_comment
    ]
)

// 로컬 상태 관리 (BottomSheet 컴포넌트 내부)
State {
    expandedCommentId: string | null = null
    isWriting: boolean = False
}

Methods {
    handleCommentExpand(commentId: string) {
        if (expandedCommentId === commentId) {
            expandedCommentId = null  // 같은 것 클릭 시 축소
        } else {
            expandedCommentId = commentId  // 다른 것 클릭 시 확장
        }
    }
    
    handleOutsideClick() {
        expandedCommentId = null  // 바깥 클릭 시 모든 확장 해제
    }
}

nametag = String(user_nickname, fontColor: color_template.font-black) + String(" • ", fontColor: color_template.grey-lv3) + String(epithet, fontColor: color_template.grey-lv3)
separator = HorizontalGrid(
    Padding(hWidth: 20px),
    HorizontalLine(color: color_template.grey-lv3, width: 4px),
    Padding(hWidth: 20px),
)

dynamic_height = 24 + 64 * len(doc_comment)
comment_box_height = Min([Max([200, dynamic_height])px, `75% of max height`])

comment_box = ScrollableVerticalGrid(
    elements: [
        CommentBox(
            nametag: c.nametag,
            content: c.content,
            commentId: c.id,
            isExpanded: expandedCommentId === c.id,
            onExpand: (id) => handleCommentExpand(id)
        ) for c in doc_comment
    ],
    hPadding: 20px,
    vLength: comment_box_height,
    // ScrollableVerticalGrid 자체는 클릭 이벤트 없음 (CommentBox만 반응)
)

comment_write_box = VerticalGrid(
    elements: [
        ScrollableTextInputBox(
            placeholder: "코멘트를 입력하세요."
        ),
        HorizontalGrid(
            elements: [
                Padding(hWidth: max),
                IconButton(
                    phosphor-icons["Bold"].paper-plane-tilt,
                    onPress: () => {
                        `구현: 댓글 입력 내용을 서버로 전송`
                        isWriting = False
                        `구현: 입력 내용 초기화`
                        // MEMO: 전송된 내용을 어떻게 서버로 전송할지 고려해야 함. 
                        // 상위 모듈 어디선가에서 이 모듈이 전송한 comment를 감지해야.
                    }
                )
            ]
        )
    ]
)

VerticalGrid(
    elements: [
        Box(
            fill: gradient(
                start: color_template.background,     //below-side
                end: color_template.grey-lv2,       //upper-side
                rotate: 90deg
            ),
            hWidth: max,
            vLength: 18,
            onPress: () => handleOutsideClick()  // 상단 그라데이션 영역 클릭
        ),
        HorizontalGrid(
            elements:[
                nametag,
                Icon(
                    phosphor-icons["Bold"].pencil-simple-line,
                    color: color_template.grey-lv,
                    onPress: () => isWriting = True
                    )
            ],
            onPress: () => handleOutsideClick()  // 헤더 영역 클릭
        ),
        separator,
        comment_write_box if isWriting else comment_box
    ],
    shadow: Property(   // 위쪽 그림자 방향
        color: color_template.background,
        x-offset: 0px,
        y-offset: -10px
    ),
    onPress: () => handleOutsideClick()  // 전체 컨테이너 클릭 (이벤트 버블링 방지 필요)
)